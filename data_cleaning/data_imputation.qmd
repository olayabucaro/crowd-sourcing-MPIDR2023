---
title: "Data Imputation"
format:
  html:
    embed-resources: true
---

## Imputation of variables

- Impute birth/death days
- Impute country of birth/death
- Reduce columns

### Setup

```{r}
#| output: false

library(data.table)
library(dplyr)
library(tidytable)
library(stringr)
library(janitor)
library(mapdata)
library(countrycode)
```

Load files in from working directory

```{r}
setwd("N:/Incubator2023_crowd")

data <- fread("moddata/moddata2.csv",na.strings="", encoding="UTF-8")
```

Drop extra columns: is_alive, month, text and day of birth, death, burial and baptism

```{r}
dataReduced <- data %>% 
  select.("profileid", "gender", ends_with("country"), ends_with("city"), ends_with("state"), ends_with("county"), 
         ends_with("country_code"), ends_with("latitude"), ends_with("longitude"), ends_with("place_name"), ends_with("year"), ends_with("coord"))

```

### 1: Date Imputations

First: Remove "abnormal" birth years - Some of these were probably BCE years (were negative) but others were probably recording/scanning errors since they are very far in the future

```{r}
abnormalYears <- dataReduced %>% 
  filter.((birth_year <= 0| death_year <= 0) | 
           (is.na(birth_year) & (baptism_year <=0 | baptism_year > 2020))| 
           (birth_year >2020| death_year > 2020 ) | 
           (is.na(death_year) & (burial_year <= 0 | burial_year > 2020)))

dataReduced2 <- dataReduced %>%  anti_join(abnormalYears, by=c('profileid'))
```

Next: Impute birth/death dates from baptism/burial years respectively

```{r}
dataReduced2 <- dataReduced2 %>% mutate.(birth_year = ifelse(is.na(birth_year), baptism_year, birth_year)) %>% 
  mutate.(death_year = ifelse(is.na(death_year), burial_year, death_year))

```

### 2: Imputing country of birth/death directly from other columns

First: Impute country of birth/death from the "coordinates column determined from lat/long

```{r}
coordImpute <- dataReduced2 %>% mutate.(birth_location_country=ifelse(is.na(birth_location_country), birth_coord_country, birth_location_country)) %>% mutate.(death_location_country=ifelse(is.na(death_location_country), death_coord_country, death_location_country))
```

Next: Impute country code information for countries that are still missing

```{r}
countCodeImpute<- coordImpute %>% mutate.(birth_location_country=ifelse(is.na(birth_location_country), birth_location_country_code, birth_location_country)) %>% mutate.(death_location_country=ifelse(is.na(death_location_country), death_location_country_code, death_location_country))
```

Next: Impute with baptism/burial location (people are baptized/buried in the same place they're born/died)

```{r}
baptismBurialImpute <- countCodeImpute %>% mutate.(birth_location_country=ifelse(is.na(birth_location_country), baptism_location_country, birth_location_country)) %>% mutate.(death_location_country=ifelse(is.na(death_location_country), burial_location_country, death_location_country))
```

Finally: Impute with baptism/burial country codes

```{r}
baptismBurialCCImpute <- baptismBurialImpute %>% mutate.(birth_location_country=ifelse(is.na(birth_location_country), baptism_location_country_code, birth_location_country)) %>% mutate.(death_location_country=ifelse(is.na(death_location_country), burial_location_country_code, death_location_country))
```

Drop some columns

```{r}
data <- baptismBurialCCImpute %>% select.("profileid", 'gender', 'current_residence_location_country', 'birth_location_country', "death_location_country", "birth_year", "death_year", ends_with("city"), ends_with("state"), ends_with("latitude"), ends_with("longitude"), ends_with("name"))
```

### 3: Impute country (USA) from state names in the state column

use countrycode package to detect US states in the state column for birth/death --\> born/died in the US

Set up state matching

```{r}
cd <- get_dictionary("us_states")
usStates <- cd$state.name #use this later to match US states to mutate to US
```

Use regex and the countrycode package to detect state names and abbreviations

```{r}
# match by state name
data <- data %>% 
  mutate.(birth_location_country=ifelse((is.na(birth_location_country) & !is.na(birth_location_state)), 
                                       countrycode(data$birth_location_state, "state.regex", "state.name", custom_dict = cd), 
                                       birth_location_country)) %>% 
  mutate.(death_location_country=ifelse((is.na(death_location_country) & !is.na(death_location_state)), 
                                       countrycode(data$death_location_state, "state.regex", "state.name", custom_dict = cd), 
                                       death_location_country))

# match by state abbreviations 
data <- data %>% 
  mutate.(birth_location_country=ifelse((is.na(birth_location_country) & !is.na(birth_location_state)), 
                                       countrycode(data$birth_location_state, "state.abb", "state.name", custom_dict = cd), 
                                       birth_location_country)) %>% 
  mutate.(death_location_country=ifelse((is.na(death_location_country) & !is.na(death_location_state)), 
                                       countrycode(data$death_location_state, "state.abb", "state.name", custom_dict = cd), 
                                       death_location_country))
```

### 4: Imputing from the free text column

Extract entries with free text information but no birth/death location to reduce amount of code to run Regex--match with state names

```{r}
freeTextBirth <- data %>% filter.(!is.na(birth_location_place_name) & is.na(birth_location_country))

freeTextDeath <- data %>% filter.(!is.na(death_location_place_name) & is.na(death_location_country))

freeTextBirth <- freeTextBirth %>% 
  mutate.(birth_location_country=countrycode(birth_location_place_name, "state.regex", "state.name", custom_dict = cd))

freeTextDeath <- freeTextDeath %>% 
  mutate.(death_location_country=countrycode(death_location_place_name, "state.regex", "state.name", custom_dict = cd))
```

Finally: merge all state information back into the main table and replace state names with "USA"

```{r}
# merge state data back into full dataframe 
data <- rows_patch(data, freeTextBirth, by='profileid')
data <- rows_patch(data, freeTextDeath, by="profileid")

# replace state names with "United States of America"

data <- data %>% mutate.(birth_location_country=case_when(birth_location_country %in% usStates ~ "United States of America", TRUE ~birth_location_country)) %>% 
  mutate.(death_location_country=case_when(death_location_country %in% usStates ~ "United States of America", TRUE ~death_location_country))
```

### 5: Countries from the free text column

First: Isolate entries that still have no country information

```{r}
freeTextBirthCountry <- data %>% filter.(!is.na(birth_location_place_name) & is.na(birth_location_country))

freeTextDeathCountry <- data %>% filter.(!is.na(death_location_place_name) & is.na(death_location_country))
```

Detect country names in birth/death free text columns and replace country columns with detected country names

```{r}
freeTextBirthCountry <- freeTextBirthCountry %>% 
  mutate.(birth_location_country=countrycode(birth_location_place_name, "country.name.en.regex", "country.name"))

freeTextDeathCountry <- freeTextDeathCountry %>% 
  mutate.(death_location_country=countrycode(death_location_place_name, "country.name.en.regex", "country.name"))

#join back into the main table
data <- rows_patch(data, freeTextBirthCountry, by='profileid')
data <- rows_patch(data, freeTextDeathCountry, by="profileid")
```

Repeat with baptism/burial locations

```{r}
freeTextBaptismCountry <- data %>% filter.(!is.na(data$baptism_location_place_name) & is.na(data$birth_location_country)) %>% 
  mutate.(birth_location_country=countrycode(baptism_location_place_name, "country.name.en.regex", "country.name"))

freeTextBurialCountry <- data %>% filter.(!is.na(data$burial_location_place_name) & is.na(data$death_location_country)) %>% 
  mutate.(death_location_country=countrycode(burial_location_place_name, "country.name.en.regex", "country.name"))

data <- data %>% rows_patch(freeTextBaptismCountry, by='profileid') %>% rows_patch(freeTextBurialCountry, by="profileid")
```

Drop extra columns

```{r}
data <- data %>% select.(-ends_with("longitude"), 
                        -ends_with("latitude"), -ends_with("name"), -ends_with("state"),
                        -starts_with("current"), -ends_with("city"))
```

## Write to csv

```{r}
setwd("N:/Incubator2023_crowd")
fwrite(data, "moddata/moddatafinal.csv")
```
