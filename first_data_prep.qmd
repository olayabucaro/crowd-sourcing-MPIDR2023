---
title: "First Data Preparation"
format: html
editor: visual
---

## Clean full familinx data

Reduce the full data down to working size

### Setup

Load necessary packages and paths to raw data in N drive and save location of
cleaned file

```{r}

# Load packages
library(data.table)
library(mapdata)

# Parameters
path_data = "N:\\Incubator2023_crowd\\ogdata\\profiles-anon.txt"
path_links = "N:\\Incubator2023_crowd\\ogdata\\relations-anon.txt"
save_path = "N:\\Incubator2023_crowd\\moddata\\"

```

## Reading the full data


```{r}

data <- fread(file = path_data, na.strings = c("*", ""), encoding = "UTF-8")

```
### Check NAs

Percentage of missing values for all columns in raw data

```{r}

na_frac <-sapply(data, function(y) sum(length(which(is.na(y))))/nrow(data)*100)

na_frac <- data.frame(na_frac)

na_frac

```

### Remove uniformative columns

Columns with no relevant information is removed from the data

```{r}

data[, c("current_residence_location_resolved_externally","current_residence_resolved_extern_confidence", "current_residence_resolved_extern_type", "birth_date_circa", "birth_location_resolved_externally", "birth_location_resolved_extern_confidence", "birth_location_resolved_extern_type", "death_date_circa", "death_location_resolved_externally", "death_location_resolved_extern_confidence", "death_location_resolved_extern_type", "burial_date_circa", "burial_location_resolved_externally", "burial_location_resolved_extern_confidence", "burial_location_resolved_extern_type", "baptism_date_circa", "baptism_location_resolved_externally", "baptism_location_resolved_extern_confidence",  "baptism_location_resolved_extern_type","cause_of_death"):=NULL] 

```

## Function to only keep profiles with relations

Function by Andrea

```{r}

# profile is the dataset with all the individual information
# links is the dataset with all the child-parent relations 
# select only the observations that are present (as a child or as a parent) in the links dataset

subset_profiles <- function(links, profile) {
  
  ids <- unique(unlist(links))
  prof_sub <- profile[ profile$profileid %in% ids, ]
  
  return(prof_sub)
  
}

```

Read links data and subset the full data

```{r}

# Read links data and run subset function

links <- fread(file = path_links, na.strings = c("*", ""))
data <- subset_profiles(links, data)

```

## Match coordinates

Function to extract location from coordinates by Andrea (rewritten to use data.table)

```{r}

# function to extract the location from the coordinates
# use map.where function from mapdata package: strings naming the region identified by the coordinates
# extract location for births, baptisms, deaths, burials
# DT ver

read_coordinates <- function(profiles, birth_coord=T,
                             baptism_coord=T,burial_coord=T,death_coord=T){
  
  if(birth_coord){
    profiles$birth_location_latitude = fifelse(is.na(profiles$birth_location_longitude) |
                                                profiles$birth_location_latitude==0,
                                              NA_real_,
                                              profiles$birth_location_latitude)
    
    profiles$birth_location_longitude = fifelse(is.na(profiles$birth_location_latitude) |
                                                 profiles$birth_location_longitude==0,NA_real_,
                                               profiles$birth_location_longitude)
    
    data_temp = profiles[!(is.na(birth_location_longitude)) &
                         !(is.na(birth_location_latitude))]
    
    data_temp$birth_coord_country = map.where(database = "world",
                                              data_temp$birth_location_longitude,
                                              data_temp$birth_location_latitude)
    
    data_temp <- data_temp[, .(profileid,birth_coord_country)]
    profiles <-  data_temp[profiles, on="profileid"]
    
  }
  if(baptism_coord){
    profiles$baptism_location_latitude = fifelse(is.na(profiles$baptism_location_longitude) |
                                                  profiles$baptism_location_latitude==0,
                                                NA_real_,
                                                profiles$baptism_location_latitude)
    
    profiles$baptism_location_longitude = fifelse(is.na(profiles$baptism_location_latitude) |
                                                   profiles$baptism_location_longitude==0,
                                                 NA_real_,
                                                 profiles$baptism_location_longitude)
    
    
    data_temp = profiles[!(is.na(baptism_location_longitude)) &
                         !(is.na(baptism_location_latitude))]
    
    data_temp$baptism_coord_country = map.where(database = "world",
                                                data_temp$baptism_location_longitude,
                                                data_temp$baptism_location_latitude)

    data_temp <- data_temp[, .(profileid,baptism_coord_country)]
    profiles <-  data_temp[profiles, on="profileid"]
  }
  
  if(death_coord){
    profiles$death_location_latitude = fifelse(is.na(profiles$death_location_longitude) |
                                                profiles$death_location_latitude==0,
                                              NA_real_,
                                              profiles$death_location_latitude)
    
    profiles$death_location_longitude = fifelse(is.na(profiles$death_location_latitude) |
                                                 profiles$death_location_longitude==0,
                                               NA_real_,
                                               profiles$death_location_longitude)
    
    data_temp = profiles[!(is.na(death_location_longitude)) &
                         !(is.na(death_location_latitude))]
  
    
    data_temp$death_coord_country = map.where(database = "world",
                                              data_temp$death_location_longitude,
                                              data_temp$death_location_latitude)

    data_temp <- data_temp[, .(profileid,death_coord_country)]
    profiles <-  data_temp[profiles, on="profileid"]
    
  }
  if(burial_coord){
    profiles$burial_location_latitude = fifelse(is.na(profiles$burial_location_longitude) |
                                                 profiles$burial_location_latitude==0,
                                               NA_real_,
                                               profiles$burial_location_latitude)
    
    profiles$burial_location_longitude = fifelse(is.na(profiles$burial_location_latitude) |
                                                  profiles$burial_location_longitude==0,
                                                NA_real_,
                                                profiles$burial_location_longitude)
    
    data_temp = profiles[!(is.na(burial_location_longitude)) &
                         !(is.na(burial_location_latitude))]
    
    data_temp$burial_coord_country = map.where(database = "world",
                                               data_temp$burial_location_longitude,
                                               data_temp$burial_location_latitude)

    data_temp <- data_temp[, .(profileid,burial_coord_country)]
    profiles <-  data_temp[profiles, on="profileid"]
  }
    
  return(profiles)
}

```

### Run the coordinate matching

```{r}

# extract the locations from the coordinates 
data_recoded = read_coordinates(data)
# keep only the country name from the strings with locations
data_recoded$birth_coord = sub(":.*", "", data_recoded$birth_coord_country)
data_recoded$death_coord = sub(":.*", "", data_recoded$death_coord_country)
data_recoded$burial_coord = sub(":.*", "", data_recoded$burial_coord_country)
data_recoded$baptism_coord = sub(":.*", "", data_recoded$baptism_coord_country)

```

## Save data to file

```{r}

fwrite(data, paste0(save_path, "moddata1.csv"))

```
